// Generated by CoffeeScript 1.6.3
(function() {
  var app, application_root, db, express, http, path;

  application_root = __dirname;

  express = require('express');

  http = require('http');

  db = require('./routes/dbServer');

  path = require('path');

  app = express();

  app.configure(function() {
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(app.router);
    app.use(express["static"](path.join(application_root, "public")));
    app.use(express.errorHandler({
      dumpExceptions: true,
      showStack: true
    }));
    app.set('port', process.env.PORT || 3000);
    app.set('views', path.join(application_root, "views"));
    return app.set('view engine', 'jade');
  });

  app.use(express["static"](path.join(__dirname, 'public')));

  app.get('/', function(req, res) {
    return res.render('index.jade');
  });

  app.get('/doseSet', function(req, res) {
    return res.send('One DoseSet');
  });

  app.get('/api/doseSets', function(req, res) {
    return DoseSet.find(function(err, doseSets) {
      return res.send(doseSets);
    });
  });

  app.get('/api/doseSets/:id', function(req, res) {
    return DoseSet.findById(req.params.id, function(err, doseSet) {
      if (!err) {
        return res.send(doseSet);
      }
    });
  });

  app.put('/api/doseSets/:id', function(req, res) {
    return DoseSet.findById(req.params.id, function(err, doseSet) {
      doseSet.title = req.body.title;
      doseSet.all = req.body.all;
      doseSet.favorited = req.body.favorited;
      return doseSet.save(function(err) {
        if (!err) {
          console.log("updated doseSet");
        }
        return res.send(doseSet);
      });
    });
  });

  app.post('/api/doseSets', function(req, res) {
    var doseSet;
    doseSet = new DoseSet({
      title: req.body.title,
      all: req.body.all,
      favorited: req.body.favorited
    });
    return doseSet.save(function(err) {
      if (!err) {
        console.log("created doseSet");
      }
      res.send(doseSet);
      return console.log(doseSet);
    });
  });

  app["delete"]('/api/doseSets/:id', function(req, res) {
    return DoseSet.findById(req.params.id, function(err, doseSet) {
      return doseSet.remove(function(err) {
        if (!err) {
          console.log("removed doseSet");
          return res.send('');
        }
      });
    });
  });

  app.get('/dose', function(req, res) {
    return res.send('One Dose');
  });

  app.get('/api/doses', function(req, res) {
    return Dose.find(function(err, doses) {
      return res.send(doses);
    });
  });

  app.get('/api/doses/:id', function(req, res) {
    return Dose.findById(req.params.id, function(err, dose) {
      if (!err) {
        return res.send(dose);
      } else {
        return console.log(err);
      }
    });
  });

  app.put('/api/doses/:id', function(req, res) {
    return Dose.findById(req.params.id, function(err, dose) {
      dose.title = req.body.title;
      dose.comments_count = req.body.comments_count;
      dose.created_at = req.body.created_at;
      dose.did = req.body.did;
      dose.height = req.body.height;
      dose.image_400_url = req.body.image_400_url;
      dose.image_teaser_url = req.body.image_teaser_url;
      dose.image_url = req.body.image_url;
      dose.likes_count = req.body.likes_count;
      dose.player = req.body.player;
      dose.rebound_source_id = req.body.rebound_source_id;
      dose.rebounds_count = req.body.rebounds_count;
      dose.short_url = req.body.short_url;
      dose.url = req.body.url;
      dose.views_count = req.body.views_count;
      dose.width = req.body.width;
      return dose.save(function(err) {
        if (!err) {
          console.log("updated dose");
        } else {
          console.log(err);
        }
        return res.send(dose);
      });
    });
  });

  app.post('/api/doses', function(req, res) {
    var dose;
    console.log('essaie de post');
    dose = new Dose({
      title: req.body.title,
      comments_count: req.body.comments_count,
      created_at: req.body.created_at,
      did: req.body.did,
      height: req.body.height,
      image_400_url: req.body.image_400_url,
      image_teaser_url: req.body.image_teaser_url,
      image_url: req.body.image_url,
      likes_count: req.body.likes_count,
      player: req.body.player,
      rebound_source_id: req.body.rebound_source_id,
      rebounds_count: req.body.rebounds_count,
      short_url: req.body.short_url,
      url: req.body.url,
      views_count: req.body.views_count,
      width: req.body.width
    });
    return dose.save(function(err) {
      if (!err) {
        console.log("created dose");
      } else {
        console.log(err);
      }
      res.send(dose);
      return console.log(dose);
    });
  });

  app["delete"]('/api/doses/:id', function(req, res) {
    return Dose.findById(req.params.id, function(err, dose) {
      return dose.remove(function(err) {
        if (!err) {
          console.log("removed dose");
          return res.send('');
        }
      });
    });
  });

  app.get('/todo', function(req, res) {
    return res.render('todo', {
      title: "MongoDB Backed TODO App"
    });
  });

  app.get('/api/todos', function(req, res) {
    return Todo.find(function(err, todos) {
      return res.send(todos);
    });
  });

  app.get('/api/todos/:id', function(req, res) {
    return Todo.findById(req.params.id, function(err, todo) {
      if (!err) {
        return res.send(todo);
      }
    });
  });

  app.put('/api/todos/:id', function(req, res) {
    return Todo.findById(req.params.id, function(err, todo) {
      todo.text = req.body.text;
      todo.done = req.body.done;
      todo.order = req.body.order;
      return todo.save(function(err) {
        if (!err) {
          console.log("updated");
        }
        return res.send(todo);
      });
    });
  });

  app.post('/api/todos', function(req, res) {
    todo;
    var todo;
    todo = new Todo({
      text: req.body.text,
      done: req.body.done,
      order: req.body.order
    });
    todo.save(function(err) {
      if (!err) {
        return console.log("created");
      }
    });
    return res.send(todo);
  });

  app["delete"]('/api/todos/:id', function(req, res) {
    return Todo.findById(req.params.id, function(err, todo) {
      return todo.remove(function(err) {
        if (!err) {
          console.log("removed");
          return res.send('');
        }
      });
    });
  });

  /*
  */


  http.createServer(app).listen(app.get('port'), function() {
    return console.log("Express server listening on port " + app.get('port'));
  });

}).call(this);
