// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', 'helpers', 'collections/DoseSets', 'views/ChooseDoseSetSelect'], function($, _, Backbone, Helpers, DoseSets, ChooseDoseSetSelect) {
    var ShowDoseSetForm, _ref;
    return ShowDoseSetForm = (function(_super) {
      __extends(ShowDoseSetForm, _super);

      function ShowDoseSetForm() {
        this.changeSelect = __bind(this.changeSelect, this);
        _ref = ShowDoseSetForm.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ShowDoseSetForm.prototype.el = '.showDoseSets';

      ShowDoseSetForm.prototype.initialize = function() {
        this.favCollec = new DoseSets();
        this.setSelector = this.$el.find('#doseSetSelector');
        this.favSetSelector = this.$el.find('#favSetSelector');
        this.setTitle = this.$el.find('span.setTitle');
        this.favAddRemove = this.$el.find('button.fav span.addRemove')[0];
        this.favAuxDes = this.$el.find('button.fav span.auxDes')[0];
        this.favNumber = this.$el.find('span.favNum')[0];
        this.hasFavs = this.$el.find('span.hasFavs')[0];
        this.createSelects(this.collection, this.setSelector);
        this.setSelector.on('change', this.changeSelect);
        this.collection.on('change : favorited', this.changeSelect);
        this.collection.on('add', this.newSelect, this);
        this.createFavCollec();
        this.changeSelect();
        return this.changeFavNumber();
      };

      ShowDoseSetForm.prototype.events = {
        'click .loadAll': 'renderAll',
        'click .delete': 'deleteDoseSet',
        'click .fav': 'changeFavs',
        'click .remFav': 'changeFavs',
        'click .showFavs': 'renderAllFavs',
        'click .oneFav': 'renderOneFav',
        'submit': 'renderOne'
      };

      ShowDoseSetForm.prototype.renderAll = function() {
        return Helpers.event.trigger('DoseSets:renderAll');
      };

      ShowDoseSetForm.prototype.renderOne = function(e) {
        e.preventDefault();
        return Helpers.event.trigger('DoseSets:renderOne', this.setSelector.val());
      };

      ShowDoseSetForm.prototype.createFavCollec = function() {
        var _this = this;
        this.collection.each(function(model) {
          if (model.attributes.favorited) {
            return _this.favCollec.add(model);
          }
        });
        return this.createSelects(this.favCollec, this.favSetSelector);
      };

      ShowDoseSetForm.prototype.createSelects = function(collection, select) {
        var _this = this;
        return collection.each(function(model) {
          return _this.addInSelect(model, select);
        });
      };

      ShowDoseSetForm.prototype.newSelect = function(model) {
        var _this = this;
        return model.fetch({
          success: function(res) {
            return _this.addInSelect(res, _this.setSelector);
          }
        });
      };

      ShowDoseSetForm.prototype.addInSelect = function(model, select) {
        var selectView;
        selectView = new ChooseDoseSetSelect({
          'model': model
        });
        return select.append(selectView.render());
      };

      ShowDoseSetForm.prototype.deleteDoseSet = function() {
        var d, f;
        if (confirm("Voulez-vous supprimer " + this.setSelector.find(':selected').text() + " ?")) {
          d = this.collection.get(this.setSelector.val());
          f = this.favCollec.get(this.setSelector.val());
          d.destroy();
          return f.destroy();
        }
      };

      ShowDoseSetForm.prototype.changeSelect = function() {
        this.setTitle.text(this.setSelector.find(':selected').attr('name'));
        if (this.collection.get(this.setSelector.val())) {
          if (this.collection.get(this.setSelector.val()).get('favorited')) {
            this.favAddRemove.innerHTML = 'Retirer';
            return this.favAuxDes.innerHTML = 'des';
          } else {
            this.favAddRemove.innerHTML = 'Ajouter';
            return this.favAuxDes.innerHTML = 'aux';
          }
        }
      };

      ShowDoseSetForm.prototype.changeFavs = function(e) {
        var select;
        if (e.currentTarget === $('.fav')[0]) {
          select = this.setSelector;
        } else if (e.target === $('.remFav')[0]) {
          select = this.favSetSelector;
        }
        if (this.collection.get(select.val()).get('favorited')) {
          this.removeFromFavs();
        } else {
          this.addToFavs();
          this.addInSelect(this.collection.get(select.val()), this.favSetSelector);
        }
        return this.changeFavNumber();
      };

      ShowDoseSetForm.prototype.changeFavNumber = function() {
        var n;
        n = (this.collection.where({
          'favorited': true
        })).length;
        this.favNumber.innerHTML = n;
        if (n > 0) {
          return this.hasFavs.innerHTML = 's';
        } else {
          return this.hasFavs.innerHTML = '';
        }
      };

      ShowDoseSetForm.prototype.addToFavs = function() {
        this.collection.get(this.setSelector.val()).set({
          'favorited': true
        }).save();
        return this.favCollec.add(this.setSelector.val());
      };

      ShowDoseSetForm.prototype.removeFromFavs = function() {
        this.collection.get(this.setSelector.val()).set({
          'favorited': false
        }).save();
        return this.favCollec.remove(this.setSelector.val());
      };

      ShowDoseSetForm.prototype.renderAllFavs = function() {
        var f;
        f = this.collection.where({
          'favorited': true
        });
        return Helpers.event.trigger('DoseSets:renderSome', f);
      };

      ShowDoseSetForm.prototype.renderOneFav = function() {
        return Helpers.event.trigger('DoseSets:renderOne', this.favSetSelector.val());
      };

      return ShowDoseSetForm;

    })(Backbone.View);
  });

}).call(this);
