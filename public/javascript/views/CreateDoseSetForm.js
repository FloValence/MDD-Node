// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'backbone', 'helpers', 'models/DoseSet', 'collections/Doses'], function($, _, Backbone, Helpers, DoseSet, Doses) {
    var CreateDoseSetForm, _ref;
    return CreateDoseSetForm = (function(_super) {
      __extends(CreateDoseSetForm, _super);

      function CreateDoseSetForm() {
        _ref = CreateDoseSetForm.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      CreateDoseSetForm.prototype.el = '#createDoseSet';

      CreateDoseSetForm.prototype.initialize = function() {};

      CreateDoseSetForm.prototype.events = {
        'submit': 'fetchDoses'
      };

      CreateDoseSetForm.prototype.fetchDoses = function(e) {
        var doseNumber, doses, dosesDone, pageNumber, successDoses, url,
          _this = this;
        e.preventDefault();
        doseNumber = 5;
        this.doseNumberInput = this.doseNumberInput || this.$el.find('.doseNumber');
        $.trim(this.doseNumberInput.val());
        if (!(isNaN(this.doseNumberInput.val())) && this.doseNumberInput.val() > 0 && $.trim(this.doseNumberInput.val()) !== '') {
          doseNumber = this.doseNumberInput.val();
        } else {
          alert('Choisissez un nombre de dose pour votre Set');
          return;
        }
        pageNumber = 1;
        this.dosePageInput = this.dosePageInput || this.$el.find('.doseOld');
        $.trim(this.doseNumberInput.val());
        if (!(isNaN(this.dosePageInput.val())) && this.dosePageInput.val() > 0 && $.trim(this.dosePageInput.val()) !== '') {
          pageNumber = this.dosePageInput.val();
        } else {
          alert('Choisissez l\'anciènneté du set, entre 1 et 100');
          return;
        }
        url = "http://api.dribbble.com/shots/everyone?page=" + pageNumber + "&per_page=" + doseNumber + "&callback=?";
        doses = new Doses();
        doses.url = url;
        successDoses = new Doses();
        dosesDone = 1;
        return doses.fetch({
          success: function() {
            doses.url = '/api/doses';
            doses.forEach(function(model) {
              model.attributes['did'] = model.attributes['id'];
              delete model.attributes['id'];
              model.save({}, {
                success: function(model, response) {
                  return console.log(response);
                }
              });
              return model.fetch({
                success: function(res1, res2) {
                  successDoses.add(res1);
                  if (dosesDone === doses.length) {
                    return _this.createDoseSet(successDoses, {
                      wait: true
                    });
                  } else {
                    return dosesDone += 1;
                  }
                }
              });
            });
            return console.log(successDoses);
          }
        });
      };

      CreateDoseSetForm.prototype.createDoseSet = function(doses) {
        var alternativeTitle, doseSet, ids,
          _this = this;
        console.log(doses);
        ids = [];
        _.each(doses.models, function(model) {
          return ids.push(model.get('_id'));
        });
        alternativeTitle = doses.first().get('title');
        this.titleInput = this.titleInput || this.$el.find('.doseSetTitle');
        doseSet = new DoseSet({
          all: ids,
          'title': this.titleInput.val() || alternativeTitle || 'UnTitled',
          'date': new Date()
        });
        console.log(doseSet);
        return this.collection.create(doseSet);
      };

      return CreateDoseSetForm;

    })(Backbone.View);
  });

}).call(this);
